<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.tangsi.user.dao.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="org.tangsi.user.entity.User" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="CHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="orderResultMap" type="org.tangsi.order.entity.Order">
    <id column="orderid" property="id" jdbcType="BIGINT"></id>
     <result column="createtime" property="createtime" jdbcType="BIGINT"></result>
     <result column="userId" property="userid" jdbcType="BIGINT"></result>
     <result column="ordername" property="name" jdbcType="VARCHAR"></result>
  </resultMap>

  <resultMap id="userResultMap" type="org.tangsi.user.entity.User"  >
      <id column="id" property="id" jdbcType="BIGINT" />
      <result column="name" property="name" jdbcType="VARCHAR" />
      <result column="email" property="email" jdbcType="VARCHAR" />
      <result column="phone" property="phone" jdbcType="CHAR" />
      <result column="username" property="username" jdbcType="VARCHAR" />
      <result column="password" property="password" jdbcType="VARCHAR" />
      <collection property="orders" ofType="org.tangsi.order.entity.Order" resultMap="orderResultMap"></collection>
  </resultMap>


  <resultMap id="fullInformationMap" type="org.tangsi.user.entity.User">
      <id column="id" property="id" jdbcType="BIGINT" />
      <result column="name" property="name" jdbcType="VARCHAR" />
      <result column="email" property="email" jdbcType="VARCHAR" />
      <result column="phone" property="phone" jdbcType="CHAR" />
      <result column="username" property="username" jdbcType="VARCHAR" />
      <result column="password" property="password" jdbcType="VARCHAR" />
      <collection property="blogs" ofType="org.tangsi.blog.entity.Blog" resultMap="fullBlogMap"></collection>
  </resultMap>

  <resultMap id="fullBlogMap" type="org.tangsi.blog.entity.Blog">
      <id column="b_id" property="id" jdbcType="BIGINT"/>
      <result column="b_name" property="name" jdbcType="VARCHAR"/>
      <result column="b_userid" property="userid" jdbcType="BIGINT"/>
        <collection property="comments" ofType="org.tangsi.comment.entity.Comment" resultMap="commentResultMap"></collection>
  </resultMap>

   <resultMap id="commentResultMap" type="org.tangsi.comment.entity.Comment">
       <id column="c_id" property="id" jdbcType="BIGINT" />
       <result column="c_name" property="name" jdbcType="VARCHAR" />
       <result column="c_blogid" property="blogid" jdbcType="BIGINT" />
   </resultMap>

    <!-- 关联查询，查询用户，及用户管理的博客，及博客关联的评论   -->
    <select id="getUserWithBlogAndComment" resultMap="fullInformationMap">

        select u.id,u.name,u.email,u.phone, b.id as b_id, b.name as b_name, b.userid as b_userid
        , c.id as c_id,c.name as c_name, c.blogid as c_blogid
         from t_user u left outer join t_blog b on u.id = b.userid
        left outer join t_comment c on c.blogid = b.id

    </select>

    <!-- 关联查询，查询用户以及用户对应的所有订单 -->
  <select id="getUserWithOrdersByPrimaryKey"  parameterType="java.lang.Long" resultMap="userResultMap">
    select u.id, u.name, u.email,u.phone,o.id as orderid, o.createtime,o.userId,o.name as ordername from t_user u join t_order o on u.id = o.userId
      where u.id= #{id,jdbcType=BIGINT}
  </select>

  <sql id="Base_Column_List" >
    id, name, email, phone,username,password
  </sql>

  <!--  查询所有的用户,支持按字段排序 -->
  <select id="selectAll" resultType="org.tangsi.user.entity.User" parameterType="map">
      select
      <include refid="Base_Column_List" />
      from t_user
      <if test="sort != null">
          order by ${sort}
      </if>
      <if test="order != null">
          ${order}
      </if>
  </select>

    <!-- 获取所有用户 -->
    <select id="queryAllUser" resultType="org.tangsi.user.entity.User" parameterType="map">
        select
        <include refid="Base_Column_List" />
        from t_user
        <if test="sort != null">
            order by ${sort}
        </if>
        <if test="order != null">
            ${order}
        </if>
    </select>

  <select id="selectWithParamMap" resultMap="BaseResultMap" parameterType="map">
      select
      <include refid="Base_Column_List" />
      from ${table} where id=#{id,jdbcType=BIGINT}
  </select>

  <select id="findByUsernameAndPwd" resultMap="BaseResultMap" parameterType="map">
      select
      <include refid="Base_Column_List" />
      from t_user where email=#{email,jdbcType=VARCHAR} and password=#{password,jdbcType=VARCHAR}
  </select>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_user
    where id = #{id,jdbcType=BIGINT}
  </delete>

   <!-- useGeneratedKeys=true 是为了告诉mybatis获取数据库产生的主键
     keyProperty="id"  是用获得的主键填充到pojo的哪一个属性
     -->
  <insert id="insert" parameterType="org.tangsi.user.entity.User" useGeneratedKeys="true" keyProperty="id">
    insert into t_user (id, name, email,
      phone,username,password)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{phone,jdbcType=CHAR},#{username,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR})
  </insert>


  <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="false" keyProperty="id">
      insert into t_user (id, name, email, phone)
      values
      <foreach collection="list" item="item" index="index" separator=",">
          (#{item.id},#{item.name},#{item.email},#{item.phone})
      </foreach>
  </insert>

  <insert id="insertSelective" parameterType="org.tangsi.user.entity.User" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="phone != null" >
        phone,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.tangsi.user.entity.User" >
    update t_user
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.tangsi.user.entity.User" >
    update t_user
    set name = #{name,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=CHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <!-- 缓存 -->
    <cache eviction="FIFO" flushInterval="60000" readOnly="true" size="512"/>  <!--  eviction缓存策略, FIFO 先进先出:按对象进入缓存的顺序来移除它们,
      flushInterval:缓存刷新时间60秒. readOnly=true,只配置查询缓存, size=512:缓存会存储列表集合或对象-->



</mapper>